# Ensure that we are keeping the source directory clean
file(TO_CMAKE_PATH "${PROJECT_BINARY_DIR}/CMakeLists.txt" LOCAL_CMAKELISTS)
if(EXISTS "${LOCAL_CMAKELISTS}")
  message(FATAL_ERROR "Cannot build in source directory. Please create a build directory and build the sources from there.")
endif()

set(THIRD_PARTY_DIR "${PROJECT_SOURCE_DIR}/../../third_party")
set(MAKE_COMMAND make)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -O3")

if(CMAKE_C_COMPILER MATCHES "^(.*/)?emcc")
  set(PLATFORM wasm)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s ALLOW_MEMORY_GROWTH=1 -s MODULARIZE=1")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s ALLOW_MEMORY_GROWTH=1 -s MODULARIZE=1")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=1 -s MODULARIZE=1 -s EXPORTED_RUNTIME_METHODS=['ccall','callMain']")
  set(CMAKE_EXECUTABLE_SUFFIX_C ".mjs")
  set(CMAKE_EXECUTABLE_SUFFIX_CXX ".mjs")
  set(MAKE_COMMAND emmake ${MAKE_COMMAND})
  set(JS_LIBRARY "${CMAKE_SOURCE_DIR}/../../tools/library.js")
else()
  set(PLATFORM native)
endif()

include_directories("${PROJECT_SOURCE_DIR}/../../tools/include")
link_directories("${PROJECT_BINARY_DIR}/../../tools/${PLATFORM}")
